// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vogtp/som/pkg/visualiser/webstatus/database/ent/counter"
)

// CounterCreate is the builder for creating a Counter entity.
type CounterCreate struct {
	config
	mutation *CounterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "Name" field.
func (cc *CounterCreate) SetName(s string) *CounterCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetValue sets the "Value" field.
func (cc *CounterCreate) SetValue(s string) *CounterCreate {
	cc.mutation.SetValue(s)
	return cc
}

// Mutation returns the CounterMutation object of the builder.
func (cc *CounterCreate) Mutation() *CounterMutation {
	return cc.mutation
}

// Save creates the Counter in the database.
func (cc *CounterCreate) Save(ctx context.Context) (*Counter, error) {
	var (
		err  error
		node *Counter
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Counter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CounterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CounterCreate) SaveX(ctx context.Context) *Counter {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CounterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CounterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CounterCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Counter.Name"`)}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "Value", err: errors.New(`ent: missing required field "Counter.Value"`)}
	}
	return nil
}

func (cc *CounterCreate) sqlSave(ctx context.Context) (*Counter, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CounterCreate) createSpec() (*Counter, *sqlgraph.CreateSpec) {
	var (
		_node = &Counter{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: counter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counter.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldValue,
		})
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Counter.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CounterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cc *CounterCreate) OnConflict(opts ...sql.ConflictOption) *CounterUpsertOne {
	cc.conflict = opts
	return &CounterUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Counter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CounterCreate) OnConflictColumns(columns ...string) *CounterUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CounterUpsertOne{
		create: cc,
	}
}

type (
	// CounterUpsertOne is the builder for "upsert"-ing
	//  one Counter node.
	CounterUpsertOne struct {
		create *CounterCreate
	}

	// CounterUpsert is the "OnConflict" setter.
	CounterUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "Name" field.
func (u *CounterUpsert) SetName(v string) *CounterUpsert {
	u.Set(counter.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *CounterUpsert) UpdateName() *CounterUpsert {
	u.SetExcluded(counter.FieldName)
	return u
}

// SetValue sets the "Value" field.
func (u *CounterUpsert) SetValue(v string) *CounterUpsert {
	u.Set(counter.FieldValue, v)
	return u
}

// UpdateValue sets the "Value" field to the value that was provided on create.
func (u *CounterUpsert) UpdateValue() *CounterUpsert {
	u.SetExcluded(counter.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Counter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CounterUpsertOne) UpdateNewValues() *CounterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Counter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CounterUpsertOne) Ignore() *CounterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CounterUpsertOne) DoNothing() *CounterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CounterCreate.OnConflict
// documentation for more info.
func (u *CounterUpsertOne) Update(set func(*CounterUpsert)) *CounterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CounterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *CounterUpsertOne) SetName(v string) *CounterUpsertOne {
	return u.Update(func(s *CounterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *CounterUpsertOne) UpdateName() *CounterUpsertOne {
	return u.Update(func(s *CounterUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "Value" field.
func (u *CounterUpsertOne) SetValue(v string) *CounterUpsertOne {
	return u.Update(func(s *CounterUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "Value" field to the value that was provided on create.
func (u *CounterUpsertOne) UpdateValue() *CounterUpsertOne {
	return u.Update(func(s *CounterUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *CounterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CounterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CounterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CounterUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CounterUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CounterCreateBulk is the builder for creating many Counter entities in bulk.
type CounterCreateBulk struct {
	config
	builders []*CounterCreate
	conflict []sql.ConflictOption
}

// Save creates the Counter entities in the database.
func (ccb *CounterCreateBulk) Save(ctx context.Context) ([]*Counter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Counter, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CounterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CounterCreateBulk) SaveX(ctx context.Context) []*Counter {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CounterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CounterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Counter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CounterUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ccb *CounterCreateBulk) OnConflict(opts ...sql.ConflictOption) *CounterUpsertBulk {
	ccb.conflict = opts
	return &CounterUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Counter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CounterCreateBulk) OnConflictColumns(columns ...string) *CounterUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CounterUpsertBulk{
		create: ccb,
	}
}

// CounterUpsertBulk is the builder for "upsert"-ing
// a bulk of Counter nodes.
type CounterUpsertBulk struct {
	create *CounterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Counter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CounterUpsertBulk) UpdateNewValues() *CounterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Counter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CounterUpsertBulk) Ignore() *CounterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CounterUpsertBulk) DoNothing() *CounterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CounterCreateBulk.OnConflict
// documentation for more info.
func (u *CounterUpsertBulk) Update(set func(*CounterUpsert)) *CounterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CounterUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *CounterUpsertBulk) SetName(v string) *CounterUpsertBulk {
	return u.Update(func(s *CounterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *CounterUpsertBulk) UpdateName() *CounterUpsertBulk {
	return u.Update(func(s *CounterUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "Value" field.
func (u *CounterUpsertBulk) SetValue(v string) *CounterUpsertBulk {
	return u.Update(func(s *CounterUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "Value" field to the value that was provided on create.
func (u *CounterUpsertBulk) UpdateValue() *CounterUpsertBulk {
	return u.Update(func(s *CounterUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *CounterUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CounterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CounterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CounterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
