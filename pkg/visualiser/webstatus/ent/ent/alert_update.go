// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent/alert"
	"github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent/predicate"
)

// AlertUpdate is the builder for updating Alert entities.
type AlertUpdate struct {
	config
	hooks    []Hook
	mutation *AlertMutation
}

// Where appends a list predicates to the AlertUpdate builder.
func (au *AlertUpdate) Where(ps ...predicate.Alert) *AlertUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetLevel sets the "Level" field.
func (au *AlertUpdate) SetLevel(i int) *AlertUpdate {
	au.mutation.ResetLevel()
	au.mutation.SetLevel(i)
	return au
}

// AddLevel adds i to the "Level" field.
func (au *AlertUpdate) AddLevel(i int) *AlertUpdate {
	au.mutation.AddLevel(i)
	return au
}

// SetUUID sets the "UUID" field.
func (au *AlertUpdate) SetUUID(u uuid.UUID) *AlertUpdate {
	au.mutation.SetUUID(u)
	return au
}

// SetIncidentID sets the "IncidentID" field.
func (au *AlertUpdate) SetIncidentID(u uuid.UUID) *AlertUpdate {
	au.mutation.SetIncidentID(u)
	return au
}

// SetName sets the "Name" field.
func (au *AlertUpdate) SetName(s string) *AlertUpdate {
	au.mutation.SetName(s)
	return au
}

// SetTime sets the "Time" field.
func (au *AlertUpdate) SetTime(t time.Time) *AlertUpdate {
	au.mutation.SetTime(t)
	return au
}

// SetUsername sets the "Username" field.
func (au *AlertUpdate) SetUsername(s string) *AlertUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetRegion sets the "Region" field.
func (au *AlertUpdate) SetRegion(s string) *AlertUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetProbeOS sets the "ProbeOS" field.
func (au *AlertUpdate) SetProbeOS(s string) *AlertUpdate {
	au.mutation.SetProbeOS(s)
	return au
}

// SetProbeHost sets the "ProbeHost" field.
func (au *AlertUpdate) SetProbeHost(s string) *AlertUpdate {
	au.mutation.SetProbeHost(s)
	return au
}

// SetError sets the "Error" field.
func (au *AlertUpdate) SetError(s string) *AlertUpdate {
	au.mutation.SetError(s)
	return au
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (au *AlertUpdate) SetNillableError(s *string) *AlertUpdate {
	if s != nil {
		au.SetError(*s)
	}
	return au
}

// ClearError clears the value of the "Error" field.
func (au *AlertUpdate) ClearError() *AlertUpdate {
	au.mutation.ClearError()
	return au
}

// Mutation returns the AlertMutation object of the builder.
func (au *AlertUpdate) Mutation() *AlertMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlertUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlertUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlertUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlertUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alert.Table,
			Columns: alert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alert.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldLevel,
		})
	}
	if value, ok := au.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldLevel,
		})
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: alert.FieldUUID,
		})
	}
	if value, ok := au.mutation.IncidentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: alert.FieldIncidentID,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldName,
		})
	}
	if value, ok := au.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldTime,
		})
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldUsername,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldRegion,
		})
	}
	if value, ok := au.mutation.ProbeOS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldProbeOS,
		})
	}
	if value, ok := au.mutation.ProbeHost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldProbeHost,
		})
	}
	if value, ok := au.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldError,
		})
	}
	if au.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: alert.FieldError,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AlertUpdateOne is the builder for updating a single Alert entity.
type AlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlertMutation
}

// SetLevel sets the "Level" field.
func (auo *AlertUpdateOne) SetLevel(i int) *AlertUpdateOne {
	auo.mutation.ResetLevel()
	auo.mutation.SetLevel(i)
	return auo
}

// AddLevel adds i to the "Level" field.
func (auo *AlertUpdateOne) AddLevel(i int) *AlertUpdateOne {
	auo.mutation.AddLevel(i)
	return auo
}

// SetUUID sets the "UUID" field.
func (auo *AlertUpdateOne) SetUUID(u uuid.UUID) *AlertUpdateOne {
	auo.mutation.SetUUID(u)
	return auo
}

// SetIncidentID sets the "IncidentID" field.
func (auo *AlertUpdateOne) SetIncidentID(u uuid.UUID) *AlertUpdateOne {
	auo.mutation.SetIncidentID(u)
	return auo
}

// SetName sets the "Name" field.
func (auo *AlertUpdateOne) SetName(s string) *AlertUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetTime sets the "Time" field.
func (auo *AlertUpdateOne) SetTime(t time.Time) *AlertUpdateOne {
	auo.mutation.SetTime(t)
	return auo
}

// SetUsername sets the "Username" field.
func (auo *AlertUpdateOne) SetUsername(s string) *AlertUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetRegion sets the "Region" field.
func (auo *AlertUpdateOne) SetRegion(s string) *AlertUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetProbeOS sets the "ProbeOS" field.
func (auo *AlertUpdateOne) SetProbeOS(s string) *AlertUpdateOne {
	auo.mutation.SetProbeOS(s)
	return auo
}

// SetProbeHost sets the "ProbeHost" field.
func (auo *AlertUpdateOne) SetProbeHost(s string) *AlertUpdateOne {
	auo.mutation.SetProbeHost(s)
	return auo
}

// SetError sets the "Error" field.
func (auo *AlertUpdateOne) SetError(s string) *AlertUpdateOne {
	auo.mutation.SetError(s)
	return auo
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableError(s *string) *AlertUpdateOne {
	if s != nil {
		auo.SetError(*s)
	}
	return auo
}

// ClearError clears the value of the "Error" field.
func (auo *AlertUpdateOne) ClearError() *AlertUpdateOne {
	auo.mutation.ClearError()
	return auo
}

// Mutation returns the AlertMutation object of the builder.
func (auo *AlertUpdateOne) Mutation() *AlertMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlertUpdateOne) Select(field string, fields ...string) *AlertUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alert entity.
func (auo *AlertUpdateOne) Save(ctx context.Context) (*Alert, error) {
	var (
		err  error
		node *Alert
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Alert)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AlertMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlertUpdateOne) SaveX(ctx context.Context) *Alert {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlertUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlertUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AlertUpdateOne) sqlSave(ctx context.Context) (_node *Alert, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alert.Table,
			Columns: alert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alert.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Alert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alert.FieldID)
		for _, f := range fields {
			if !alert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldLevel,
		})
	}
	if value, ok := auo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: alert.FieldLevel,
		})
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: alert.FieldUUID,
		})
	}
	if value, ok := auo.mutation.IncidentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: alert.FieldIncidentID,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldName,
		})
	}
	if value, ok := auo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alert.FieldTime,
		})
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldUsername,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldRegion,
		})
	}
	if value, ok := auo.mutation.ProbeOS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldProbeOS,
		})
	}
	if value, ok := auo.mutation.ProbeHost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldProbeHost,
		})
	}
	if value, ok := auo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alert.FieldError,
		})
	}
	if auo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: alert.FieldError,
		})
	}
	_node = &Alert{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
