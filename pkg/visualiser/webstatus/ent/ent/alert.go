// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent/alert"
)

// Alert is the model entity for the Alert schema.
type Alert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "Level" field.
	Level int `json:"Level,omitempty"`
	// UUID holds the value of the "UUID" field.
	UUID uuid.UUID `json:"UUID,omitempty"`
	// IncidentID holds the value of the "IncidentID" field.
	IncidentID uuid.UUID `json:"IncidentID,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Time holds the value of the "Time" field.
	Time time.Time `json:"Time,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// Region holds the value of the "Region" field.
	Region string `json:"Region,omitempty"`
	// ProbeOS holds the value of the "ProbeOS" field.
	ProbeOS string `json:"ProbeOS,omitempty"`
	// ProbeHost holds the value of the "ProbeHost" field.
	ProbeHost string `json:"ProbeHost,omitempty"`
	// Error holds the value of the "Error" field.
	Error string `json:"Error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertQuery when eager-loading is set.
	Edges AlertEdges `json:"edges"`
}

// AlertEdges holds the relations/edges for other nodes in the graph.
type AlertEdges struct {
	// Counters holds the value of the Counters edge.
	Counters []*Counter `json:"Counters,omitempty"`
	// Stati holds the value of the Stati edge.
	Stati []*Status `json:"Stati,omitempty"`
	// Failures holds the value of the Failures edge.
	Failures []*Failure `json:"Failures,omitempty"`
	// Files holds the value of the Files edge.
	Files []*File `json:"Files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedCounters map[string][]*Counter
	namedStati    map[string][]*Status
	namedFailures map[string][]*Failure
	namedFiles    map[string][]*File
}

// CountersOrErr returns the Counters value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) CountersOrErr() ([]*Counter, error) {
	if e.loadedTypes[0] {
		return e.Counters, nil
	}
	return nil, &NotLoadedError{edge: "Counters"}
}

// StatiOrErr returns the Stati value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) StatiOrErr() ([]*Status, error) {
	if e.loadedTypes[1] {
		return e.Stati, nil
	}
	return nil, &NotLoadedError{edge: "Stati"}
}

// FailuresOrErr returns the Failures value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) FailuresOrErr() ([]*Failure, error) {
	if e.loadedTypes[2] {
		return e.Failures, nil
	}
	return nil, &NotLoadedError{edge: "Failures"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[3] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "Files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alert.FieldID, alert.FieldLevel:
			values[i] = new(sql.NullInt64)
		case alert.FieldName, alert.FieldUsername, alert.FieldRegion, alert.FieldProbeOS, alert.FieldProbeHost, alert.FieldError:
			values[i] = new(sql.NullString)
		case alert.FieldTime:
			values[i] = new(sql.NullTime)
		case alert.FieldUUID, alert.FieldIncidentID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Alert", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alert fields.
func (a *Alert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case alert.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Level", values[i])
			} else if value.Valid {
				a.Level = int(value.Int64)
			}
		case alert.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field UUID", values[i])
			} else if value != nil {
				a.UUID = *value
			}
		case alert.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field IncidentID", values[i])
			} else if value != nil {
				a.IncidentID = *value
			}
		case alert.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case alert.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Time", values[i])
			} else if value.Valid {
				a.Time = value.Time
			}
		case alert.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case alert.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Region", values[i])
			} else if value.Valid {
				a.Region = value.String
			}
		case alert.FieldProbeOS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProbeOS", values[i])
			} else if value.Valid {
				a.ProbeOS = value.String
			}
		case alert.FieldProbeHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProbeHost", values[i])
			} else if value.Valid {
				a.ProbeHost = value.String
			}
		case alert.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Error", values[i])
			} else if value.Valid {
				a.Error = value.String
			}
		}
	}
	return nil
}

// QueryCounters queries the "Counters" edge of the Alert entity.
func (a *Alert) QueryCounters() *CounterQuery {
	return (&AlertClient{config: a.config}).QueryCounters(a)
}

// QueryStati queries the "Stati" edge of the Alert entity.
func (a *Alert) QueryStati() *StatusQuery {
	return (&AlertClient{config: a.config}).QueryStati(a)
}

// QueryFailures queries the "Failures" edge of the Alert entity.
func (a *Alert) QueryFailures() *FailureQuery {
	return (&AlertClient{config: a.config}).QueryFailures(a)
}

// QueryFiles queries the "Files" edge of the Alert entity.
func (a *Alert) QueryFiles() *FileQuery {
	return (&AlertClient{config: a.config}).QueryFiles(a)
}

// Update returns a builder for updating this Alert.
// Note that you need to call Alert.Unwrap() before calling this method if this Alert
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alert) Update() *AlertUpdateOne {
	return (&AlertClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Alert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alert) Unwrap() *Alert {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alert is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alert) String() string {
	var builder strings.Builder
	builder.WriteString("Alert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Level=")
	builder.WriteString(fmt.Sprintf("%v", a.Level))
	builder.WriteString(", ")
	builder.WriteString("UUID=")
	builder.WriteString(fmt.Sprintf("%v", a.UUID))
	builder.WriteString(", ")
	builder.WriteString("IncidentID=")
	builder.WriteString(fmt.Sprintf("%v", a.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("Time=")
	builder.WriteString(a.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("Region=")
	builder.WriteString(a.Region)
	builder.WriteString(", ")
	builder.WriteString("ProbeOS=")
	builder.WriteString(a.ProbeOS)
	builder.WriteString(", ")
	builder.WriteString("ProbeHost=")
	builder.WriteString(a.ProbeHost)
	builder.WriteString(", ")
	builder.WriteString("Error=")
	builder.WriteString(a.Error)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCounters returns the Counters named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Alert) NamedCounters(name string) ([]*Counter, error) {
	if a.Edges.namedCounters == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedCounters[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Alert) appendNamedCounters(name string, edges ...*Counter) {
	if a.Edges.namedCounters == nil {
		a.Edges.namedCounters = make(map[string][]*Counter)
	}
	if len(edges) == 0 {
		a.Edges.namedCounters[name] = []*Counter{}
	} else {
		a.Edges.namedCounters[name] = append(a.Edges.namedCounters[name], edges...)
	}
}

// NamedStati returns the Stati named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Alert) NamedStati(name string) ([]*Status, error) {
	if a.Edges.namedStati == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedStati[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Alert) appendNamedStati(name string, edges ...*Status) {
	if a.Edges.namedStati == nil {
		a.Edges.namedStati = make(map[string][]*Status)
	}
	if len(edges) == 0 {
		a.Edges.namedStati[name] = []*Status{}
	} else {
		a.Edges.namedStati[name] = append(a.Edges.namedStati[name], edges...)
	}
}

// NamedFailures returns the Failures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Alert) NamedFailures(name string) ([]*Failure, error) {
	if a.Edges.namedFailures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedFailures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Alert) appendNamedFailures(name string, edges ...*Failure) {
	if a.Edges.namedFailures == nil {
		a.Edges.namedFailures = make(map[string][]*Failure)
	}
	if len(edges) == 0 {
		a.Edges.namedFailures[name] = []*Failure{}
	} else {
		a.Edges.namedFailures[name] = append(a.Edges.namedFailures[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Alert) NamedFiles(name string) ([]*File, error) {
	if a.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Alert) appendNamedFiles(name string, edges ...*File) {
	if a.Edges.namedFiles == nil {
		a.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		a.Edges.namedFiles[name] = []*File{}
	} else {
		a.Edges.namedFiles[name] = append(a.Edges.namedFiles[name], edges...)
	}
}

// Alerts is a parsable slice of Alert.
type Alerts []*Alert

func (a Alerts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
