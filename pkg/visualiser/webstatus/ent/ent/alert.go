// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent/alert"
)

// Alert is the model entity for the Alert schema.
type Alert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "Level" field.
	Level int `json:"Level,omitempty"`
	// UUID holds the value of the "UUID" field.
	UUID uuid.UUID `json:"UUID,omitempty"`
	// IncidentID holds the value of the "IncidentID" field.
	IncidentID uuid.UUID `json:"IncidentID,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Time holds the value of the "Time" field.
	Time time.Time `json:"Time,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// Region holds the value of the "Region" field.
	Region string `json:"Region,omitempty"`
	// ProbeOS holds the value of the "ProbeOS" field.
	ProbeOS string `json:"ProbeOS,omitempty"`
	// ProbeHost holds the value of the "ProbeHost" field.
	ProbeHost string `json:"ProbeHost,omitempty"`
	// Error holds the value of the "Error" field.
	Error string `json:"Error,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alert.FieldID, alert.FieldLevel:
			values[i] = new(sql.NullInt64)
		case alert.FieldName, alert.FieldUsername, alert.FieldRegion, alert.FieldProbeOS, alert.FieldProbeHost, alert.FieldError:
			values[i] = new(sql.NullString)
		case alert.FieldTime:
			values[i] = new(sql.NullTime)
		case alert.FieldUUID, alert.FieldIncidentID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Alert", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alert fields.
func (a *Alert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case alert.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Level", values[i])
			} else if value.Valid {
				a.Level = int(value.Int64)
			}
		case alert.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field UUID", values[i])
			} else if value != nil {
				a.UUID = *value
			}
		case alert.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field IncidentID", values[i])
			} else if value != nil {
				a.IncidentID = *value
			}
		case alert.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case alert.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Time", values[i])
			} else if value.Valid {
				a.Time = value.Time
			}
		case alert.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case alert.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Region", values[i])
			} else if value.Valid {
				a.Region = value.String
			}
		case alert.FieldProbeOS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProbeOS", values[i])
			} else if value.Valid {
				a.ProbeOS = value.String
			}
		case alert.FieldProbeHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProbeHost", values[i])
			} else if value.Valid {
				a.ProbeHost = value.String
			}
		case alert.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Error", values[i])
			} else if value.Valid {
				a.Error = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Alert.
// Note that you need to call Alert.Unwrap() before calling this method if this Alert
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alert) Update() *AlertUpdateOne {
	return (&AlertClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Alert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alert) Unwrap() *Alert {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alert is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alert) String() string {
	var builder strings.Builder
	builder.WriteString("Alert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Level=")
	builder.WriteString(fmt.Sprintf("%v", a.Level))
	builder.WriteString(", ")
	builder.WriteString("UUID=")
	builder.WriteString(fmt.Sprintf("%v", a.UUID))
	builder.WriteString(", ")
	builder.WriteString("IncidentID=")
	builder.WriteString(fmt.Sprintf("%v", a.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("Time=")
	builder.WriteString(a.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("Region=")
	builder.WriteString(a.Region)
	builder.WriteString(", ")
	builder.WriteString("ProbeOS=")
	builder.WriteString(a.ProbeOS)
	builder.WriteString(", ")
	builder.WriteString("ProbeHost=")
	builder.WriteString(a.ProbeHost)
	builder.WriteString(", ")
	builder.WriteString("Error=")
	builder.WriteString(a.Error)
	builder.WriteByte(')')
	return builder.String()
}

// Alerts is a parsable slice of Alert.
type Alerts []*Alert

func (a Alerts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
