// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent/counter"
)

// Counter is the model entity for the Counter schema.
type Counter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Value holds the value of the "Value" field.
	Value             string `json:"Value,omitempty"`
	incident_counters *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Counter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case counter.FieldID:
			values[i] = new(sql.NullInt64)
		case counter.FieldName, counter.FieldValue:
			values[i] = new(sql.NullString)
		case counter.ForeignKeys[0]: // incident_counters
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Counter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Counter fields.
func (c *Counter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case counter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case counter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case counter.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Value", values[i])
			} else if value.Valid {
				c.Value = value.String
			}
		case counter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field incident_counters", value)
			} else if value.Valid {
				c.incident_counters = new(int)
				*c.incident_counters = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Counter.
// Note that you need to call Counter.Unwrap() before calling this method if this Counter
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Counter) Update() *CounterUpdateOne {
	return (&CounterClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Counter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Counter) Unwrap() *Counter {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Counter is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Counter) String() string {
	var builder strings.Builder
	builder.WriteString("Counter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("Name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("Value=")
	builder.WriteString(c.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Counters is a parsable slice of Counter.
type Counters []*Counter

func (c Counters) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
