// Code generated by ent, DO NOT EDIT.

package incident

const (
	// Label holds the string label denoting the incident type in the database.
	Label = "incident"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldIncidentID holds the string denoting the incidentid field in the database.
	FieldIncidentID = "incident_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldProbeOS holds the string denoting the probeos field in the database.
	FieldProbeOS = "probe_os"
	// FieldProbeHost holds the string denoting the probehost field in the database.
	FieldProbeHost = "probe_host"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeCounters holds the string denoting the counters edge name in mutations.
	EdgeCounters = "Counters"
	// EdgeStati holds the string denoting the stati edge name in mutations.
	EdgeStati = "Stati"
	// EdgeFailures holds the string denoting the failures edge name in mutations.
	EdgeFailures = "Failures"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "Files"
	// Table holds the table name of the incident in the database.
	Table = "incidents"
	// CountersTable is the table that holds the Counters relation/edge.
	CountersTable = "counters"
	// CountersInverseTable is the table name for the Counter entity.
	// It exists in this package in order to avoid circular dependency with the "counter" package.
	CountersInverseTable = "counters"
	// CountersColumn is the table column denoting the Counters relation/edge.
	CountersColumn = "incident_counters"
	// StatiTable is the table that holds the Stati relation/edge.
	StatiTable = "status"
	// StatiInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatiInverseTable = "status"
	// StatiColumn is the table column denoting the Stati relation/edge.
	StatiColumn = "incident_stati"
	// FailuresTable is the table that holds the Failures relation/edge.
	FailuresTable = "failures"
	// FailuresInverseTable is the table name for the Failure entity.
	// It exists in this package in order to avoid circular dependency with the "failure" package.
	FailuresInverseTable = "failures"
	// FailuresColumn is the table column denoting the Failures relation/edge.
	FailuresColumn = "incident_failures"
	// FilesTable is the table that holds the Files relation/edge.
	FilesTable = "files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// FilesColumn is the table column denoting the Files relation/edge.
	FilesColumn = "incident_files"
)

// Columns holds all SQL columns for incident fields.
var Columns = []string{
	FieldID,
	FieldLevel,
	FieldStart,
	FieldEnd,
	FieldState,
	FieldUUID,
	FieldIncidentID,
	FieldName,
	FieldTime,
	FieldUsername,
	FieldRegion,
	FieldProbeOS,
	FieldProbeHost,
	FieldError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
