directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Alert implements Node {
  id: ID!
  level: Int!
  uuid: UUID!
  incidentid: UUID!
  name: String!
  time: Time!
  username: String!
  region: String!
  probeos: String!
  probehost: String!
  error: String
}
"""
AlertWhereInput is used for filtering Alert objects.
Input was generated by ent.
"""
input AlertWhereInput {
  not: AlertWhereInput
  and: [AlertWhereInput!]
  or: [AlertWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Level field predicates"""
  level: Int
  levelNEQ: Int
  levelIn: [Int!]
  levelNotIn: [Int!]
  levelGT: Int
  levelGTE: Int
  levelLT: Int
  levelLTE: Int
  """UUID field predicates"""
  uuid: UUID
  uuidNEQ: UUID
  uuidIn: [UUID!]
  uuidNotIn: [UUID!]
  uuidGT: UUID
  uuidGTE: UUID
  uuidLT: UUID
  uuidLTE: UUID
  """IncidentID field predicates"""
  incidentid: UUID
  incidentidNEQ: UUID
  incidentidIn: [UUID!]
  incidentidNotIn: [UUID!]
  incidentidGT: UUID
  incidentidGTE: UUID
  incidentidLT: UUID
  incidentidLTE: UUID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """Time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  """Username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """Region field predicates"""
  region: String
  regionNEQ: String
  regionIn: [String!]
  regionNotIn: [String!]
  regionGT: String
  regionGTE: String
  regionLT: String
  regionLTE: String
  regionContains: String
  regionHasPrefix: String
  regionHasSuffix: String
  regionEqualFold: String
  regionContainsFold: String
  """ProbeOS field predicates"""
  probeos: String
  probeosNEQ: String
  probeosIn: [String!]
  probeosNotIn: [String!]
  probeosGT: String
  probeosGTE: String
  probeosLT: String
  probeosLTE: String
  probeosContains: String
  probeosHasPrefix: String
  probeosHasSuffix: String
  probeosEqualFold: String
  probeosContainsFold: String
  """ProbeHost field predicates"""
  probehost: String
  probehostNEQ: String
  probehostIn: [String!]
  probehostNotIn: [String!]
  probehostGT: String
  probehostGTE: String
  probehostLT: String
  probehostLTE: String
  probehostContains: String
  probehostHasPrefix: String
  probehostHasSuffix: String
  probehostEqualFold: String
  probehostContainsFold: String
  """Error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
}
type Counter implements Node {
  id: ID!
  name: String!
  value: String!
}
"""
CounterWhereInput is used for filtering Counter objects.
Input was generated by ent.
"""
input CounterWhereInput {
  not: CounterWhereInput
  and: [CounterWhereInput!]
  or: [CounterWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """Value field predicates"""
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Failure implements Node {
  id: ID!
  error: String!
  idx: Int!
}
"""
FailureWhereInput is used for filtering Failure objects.
Input was generated by ent.
"""
input FailureWhereInput {
  not: FailureWhereInput
  and: [FailureWhereInput!]
  or: [FailureWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorEqualFold: String
  errorContainsFold: String
  """Idx field predicates"""
  idx: Int
  idxNEQ: Int
  idxIn: [Int!]
  idxNotIn: [Int!]
  idxGT: Int
  idxGTE: Int
  idxLT: Int
  idxLTE: Int
}
type Incident implements Node {
  id: ID!
  level: Int
  start: Time!
  end: Time!
  state: []byte!
  uuid: UUID!
  incidentid: UUID!
  name: String!
  time: Time!
  username: String!
  region: String!
  probeos: String!
  probehost: String!
  error: String
  counters: [Counter!]
  stati: [Status!]
  failures: [Failure!]
}
"""
IncidentWhereInput is used for filtering Incident objects.
Input was generated by ent.
"""
input IncidentWhereInput {
  not: IncidentWhereInput
  and: [IncidentWhereInput!]
  or: [IncidentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Level field predicates"""
  level: Int
  levelNEQ: Int
  levelIn: [Int!]
  levelNotIn: [Int!]
  levelGT: Int
  levelGTE: Int
  levelLT: Int
  levelLTE: Int
  levelIsNil: Boolean
  levelNotNil: Boolean
  """Start field predicates"""
  start: Time
  startNEQ: Time
  startIn: [Time!]
  startNotIn: [Time!]
  startGT: Time
  startGTE: Time
  startLT: Time
  startLTE: Time
  """End field predicates"""
  end: Time
  endNEQ: Time
  endIn: [Time!]
  endNotIn: [Time!]
  endGT: Time
  endGTE: Time
  endLT: Time
  endLTE: Time
  """UUID field predicates"""
  uuid: UUID
  uuidNEQ: UUID
  uuidIn: [UUID!]
  uuidNotIn: [UUID!]
  uuidGT: UUID
  uuidGTE: UUID
  uuidLT: UUID
  uuidLTE: UUID
  """IncidentID field predicates"""
  incidentid: UUID
  incidentidNEQ: UUID
  incidentidIn: [UUID!]
  incidentidNotIn: [UUID!]
  incidentidGT: UUID
  incidentidGTE: UUID
  incidentidLT: UUID
  incidentidLTE: UUID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """Time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  """Username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """Region field predicates"""
  region: String
  regionNEQ: String
  regionIn: [String!]
  regionNotIn: [String!]
  regionGT: String
  regionGTE: String
  regionLT: String
  regionLTE: String
  regionContains: String
  regionHasPrefix: String
  regionHasSuffix: String
  regionEqualFold: String
  regionContainsFold: String
  """ProbeOS field predicates"""
  probeos: String
  probeosNEQ: String
  probeosIn: [String!]
  probeosNotIn: [String!]
  probeosGT: String
  probeosGTE: String
  probeosLT: String
  probeosLTE: String
  probeosContains: String
  probeosHasPrefix: String
  probeosHasSuffix: String
  probeosEqualFold: String
  probeosContainsFold: String
  """ProbeHost field predicates"""
  probehost: String
  probehostNEQ: String
  probehostIn: [String!]
  probehostNotIn: [String!]
  probehostGT: String
  probehostGTE: String
  probehostLT: String
  probehostLTE: String
  probehostContains: String
  probehostHasPrefix: String
  probehostHasSuffix: String
  probehostEqualFold: String
  probehostContainsFold: String
  """Error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """Counters edge predicates"""
  hasCounters: Boolean
  hasCountersWith: [CounterWhereInput!]
  """Stati edge predicates"""
  hasStati: Boolean
  hasStatiWith: [StatusWhereInput!]
  """Failures edge predicates"""
  hasFailures: Boolean
  hasFailuresWith: [FailureWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/vogtp/som/pkg/visualiser/webstatus/ent/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Status implements Node {
  id: ID!
  name: String!
  value: String!
}
"""
StatusWhereInput is used for filtering Status objects.
Input was generated by ent.
"""
input StatusWhereInput {
  not: StatusWhereInput
  and: [StatusWhereInput!]
  or: [StatusWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """Value field predicates"""
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
}
