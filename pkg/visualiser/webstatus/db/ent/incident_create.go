// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/counter"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/failure"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/file"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/incident"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/status"
)

// IncidentCreate is the builder for creating a Incident entity.
type IncidentCreate struct {
	config
	mutation *IncidentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "UUID" field.
func (ic *IncidentCreate) SetUUID(u uuid.UUID) *IncidentCreate {
	ic.mutation.SetUUID(u)
	return ic
}

// SetIncidentID sets the "IncidentID" field.
func (ic *IncidentCreate) SetIncidentID(u uuid.UUID) *IncidentCreate {
	ic.mutation.SetIncidentID(u)
	return ic
}

// SetNillableIncidentID sets the "IncidentID" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableIncidentID(u *uuid.UUID) *IncidentCreate {
	if u != nil {
		ic.SetIncidentID(*u)
	}
	return ic
}

// SetName sets the "Name" field.
func (ic *IncidentCreate) SetName(s string) *IncidentCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetTime sets the "Time" field.
func (ic *IncidentCreate) SetTime(t time.Time) *IncidentCreate {
	ic.mutation.SetTime(t)
	return ic
}

// SetIntLevel sets the "IntLevel" field.
func (ic *IncidentCreate) SetIntLevel(i int) *IncidentCreate {
	ic.mutation.SetIntLevel(i)
	return ic
}

// SetUsername sets the "Username" field.
func (ic *IncidentCreate) SetUsername(s string) *IncidentCreate {
	ic.mutation.SetUsername(s)
	return ic
}

// SetRegion sets the "Region" field.
func (ic *IncidentCreate) SetRegion(s string) *IncidentCreate {
	ic.mutation.SetRegion(s)
	return ic
}

// SetProbeOS sets the "ProbeOS" field.
func (ic *IncidentCreate) SetProbeOS(s string) *IncidentCreate {
	ic.mutation.SetProbeOS(s)
	return ic
}

// SetProbeHost sets the "ProbeHost" field.
func (ic *IncidentCreate) SetProbeHost(s string) *IncidentCreate {
	ic.mutation.SetProbeHost(s)
	return ic
}

// SetError sets the "Error" field.
func (ic *IncidentCreate) SetError(s string) *IncidentCreate {
	ic.mutation.SetError(s)
	return ic
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableError(s *string) *IncidentCreate {
	if s != nil {
		ic.SetError(*s)
	}
	return ic
}

// SetStart sets the "Start" field.
func (ic *IncidentCreate) SetStart(t time.Time) *IncidentCreate {
	ic.mutation.SetStart(t)
	return ic
}

// SetEnd sets the "End" field.
func (ic *IncidentCreate) SetEnd(t time.Time) *IncidentCreate {
	ic.mutation.SetEnd(t)
	return ic
}

// SetNillableEnd sets the "End" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableEnd(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetEnd(*t)
	}
	return ic
}

// SetState sets the "State" field.
func (ic *IncidentCreate) SetState(b []byte) *IncidentCreate {
	ic.mutation.SetState(b)
	return ic
}

// AddCounterIDs adds the "Counters" edge to the Counter entity by IDs.
func (ic *IncidentCreate) AddCounterIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddCounterIDs(ids...)
	return ic
}

// AddCounters adds the "Counters" edges to the Counter entity.
func (ic *IncidentCreate) AddCounters(c ...*Counter) *IncidentCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddCounterIDs(ids...)
}

// AddStatiIDs adds the "Stati" edge to the Status entity by IDs.
func (ic *IncidentCreate) AddStatiIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddStatiIDs(ids...)
	return ic
}

// AddStati adds the "Stati" edges to the Status entity.
func (ic *IncidentCreate) AddStati(s ...*Status) *IncidentCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ic.AddStatiIDs(ids...)
}

// AddFailureIDs adds the "Failures" edge to the Failure entity by IDs.
func (ic *IncidentCreate) AddFailureIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddFailureIDs(ids...)
	return ic
}

// AddFailures adds the "Failures" edges to the Failure entity.
func (ic *IncidentCreate) AddFailures(f ...*Failure) *IncidentCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ic.AddFailureIDs(ids...)
}

// AddFileIDs adds the "Files" edge to the File entity by IDs.
func (ic *IncidentCreate) AddFileIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddFileIDs(ids...)
	return ic
}

// AddFiles adds the "Files" edges to the File entity.
func (ic *IncidentCreate) AddFiles(f ...*File) *IncidentCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ic.AddFileIDs(ids...)
}

// Mutation returns the IncidentMutation object of the builder.
func (ic *IncidentCreate) Mutation() *IncidentMutation {
	return ic.mutation
}

// Save creates the Incident in the database.
func (ic *IncidentCreate) Save(ctx context.Context) (*Incident, error) {
	return withHooks[*Incident, IncidentMutation](ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IncidentCreate) SaveX(ctx context.Context) *Incident {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IncidentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IncidentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IncidentCreate) check() error {
	if _, ok := ic.mutation.UUID(); !ok {
		return &ValidationError{Name: "UUID", err: errors.New(`ent: missing required field "Incident.UUID"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Incident.Name"`)}
	}
	if _, ok := ic.mutation.Time(); !ok {
		return &ValidationError{Name: "Time", err: errors.New(`ent: missing required field "Incident.Time"`)}
	}
	if _, ok := ic.mutation.IntLevel(); !ok {
		return &ValidationError{Name: "IntLevel", err: errors.New(`ent: missing required field "Incident.IntLevel"`)}
	}
	if _, ok := ic.mutation.Username(); !ok {
		return &ValidationError{Name: "Username", err: errors.New(`ent: missing required field "Incident.Username"`)}
	}
	if _, ok := ic.mutation.Region(); !ok {
		return &ValidationError{Name: "Region", err: errors.New(`ent: missing required field "Incident.Region"`)}
	}
	if _, ok := ic.mutation.ProbeOS(); !ok {
		return &ValidationError{Name: "ProbeOS", err: errors.New(`ent: missing required field "Incident.ProbeOS"`)}
	}
	if _, ok := ic.mutation.ProbeHost(); !ok {
		return &ValidationError{Name: "ProbeHost", err: errors.New(`ent: missing required field "Incident.ProbeHost"`)}
	}
	if _, ok := ic.mutation.Start(); !ok {
		return &ValidationError{Name: "Start", err: errors.New(`ent: missing required field "Incident.Start"`)}
	}
	if _, ok := ic.mutation.State(); !ok {
		return &ValidationError{Name: "State", err: errors.New(`ent: missing required field "Incident.State"`)}
	}
	return nil
}

func (ic *IncidentCreate) sqlSave(ctx context.Context) (*Incident, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IncidentCreate) createSpec() (*Incident, *sqlgraph.CreateSpec) {
	var (
		_node = &Incident{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(incident.Table, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.UUID(); ok {
		_spec.SetField(incident.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := ic.mutation.IncidentID(); ok {
		_spec.SetField(incident.FieldIncidentID, field.TypeUUID, value)
		_node.IncidentID = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(incident.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := ic.mutation.IntLevel(); ok {
		_spec.SetField(incident.FieldIntLevel, field.TypeInt, value)
		_node.IntLevel = value
	}
	if value, ok := ic.mutation.Username(); ok {
		_spec.SetField(incident.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ic.mutation.Region(); ok {
		_spec.SetField(incident.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := ic.mutation.ProbeOS(); ok {
		_spec.SetField(incident.FieldProbeOS, field.TypeString, value)
		_node.ProbeOS = value
	}
	if value, ok := ic.mutation.ProbeHost(); ok {
		_spec.SetField(incident.FieldProbeHost, field.TypeString, value)
		_node.ProbeHost = value
	}
	if value, ok := ic.mutation.Error(); ok {
		_spec.SetField(incident.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := ic.mutation.Start(); ok {
		_spec.SetField(incident.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := ic.mutation.End(); ok {
		_spec.SetField(incident.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := ic.mutation.State(); ok {
		_spec.SetField(incident.FieldState, field.TypeBytes, value)
		_node.State = value
	}
	if nodes := ic.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.StatiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.FailuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Incident.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (ic *IncidentCreate) OnConflict(opts ...sql.ConflictOption) *IncidentUpsertOne {
	ic.conflict = opts
	return &IncidentUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IncidentCreate) OnConflictColumns(columns ...string) *IncidentUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IncidentUpsertOne{
		create: ic,
	}
}

type (
	// IncidentUpsertOne is the builder for "upsert"-ing
	//  one Incident node.
	IncidentUpsertOne struct {
		create *IncidentCreate
	}

	// IncidentUpsert is the "OnConflict" setter.
	IncidentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "UUID" field.
func (u *IncidentUpsert) SetUUID(v uuid.UUID) *IncidentUpsert {
	u.Set(incident.FieldUUID, v)
	return u
}

// UpdateUUID sets the "UUID" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateUUID() *IncidentUpsert {
	u.SetExcluded(incident.FieldUUID)
	return u
}

// SetIncidentID sets the "IncidentID" field.
func (u *IncidentUpsert) SetIncidentID(v uuid.UUID) *IncidentUpsert {
	u.Set(incident.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "IncidentID" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateIncidentID() *IncidentUpsert {
	u.SetExcluded(incident.FieldIncidentID)
	return u
}

// ClearIncidentID clears the value of the "IncidentID" field.
func (u *IncidentUpsert) ClearIncidentID() *IncidentUpsert {
	u.SetNull(incident.FieldIncidentID)
	return u
}

// SetName sets the "Name" field.
func (u *IncidentUpsert) SetName(v string) *IncidentUpsert {
	u.Set(incident.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateName() *IncidentUpsert {
	u.SetExcluded(incident.FieldName)
	return u
}

// SetTime sets the "Time" field.
func (u *IncidentUpsert) SetTime(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldTime, v)
	return u
}

// UpdateTime sets the "Time" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateTime() *IncidentUpsert {
	u.SetExcluded(incident.FieldTime)
	return u
}

// SetIntLevel sets the "IntLevel" field.
func (u *IncidentUpsert) SetIntLevel(v int) *IncidentUpsert {
	u.Set(incident.FieldIntLevel, v)
	return u
}

// UpdateIntLevel sets the "IntLevel" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateIntLevel() *IncidentUpsert {
	u.SetExcluded(incident.FieldIntLevel)
	return u
}

// AddIntLevel adds v to the "IntLevel" field.
func (u *IncidentUpsert) AddIntLevel(v int) *IncidentUpsert {
	u.Add(incident.FieldIntLevel, v)
	return u
}

// SetUsername sets the "Username" field.
func (u *IncidentUpsert) SetUsername(v string) *IncidentUpsert {
	u.Set(incident.FieldUsername, v)
	return u
}

// UpdateUsername sets the "Username" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateUsername() *IncidentUpsert {
	u.SetExcluded(incident.FieldUsername)
	return u
}

// SetRegion sets the "Region" field.
func (u *IncidentUpsert) SetRegion(v string) *IncidentUpsert {
	u.Set(incident.FieldRegion, v)
	return u
}

// UpdateRegion sets the "Region" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateRegion() *IncidentUpsert {
	u.SetExcluded(incident.FieldRegion)
	return u
}

// SetProbeOS sets the "ProbeOS" field.
func (u *IncidentUpsert) SetProbeOS(v string) *IncidentUpsert {
	u.Set(incident.FieldProbeOS, v)
	return u
}

// UpdateProbeOS sets the "ProbeOS" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateProbeOS() *IncidentUpsert {
	u.SetExcluded(incident.FieldProbeOS)
	return u
}

// SetProbeHost sets the "ProbeHost" field.
func (u *IncidentUpsert) SetProbeHost(v string) *IncidentUpsert {
	u.Set(incident.FieldProbeHost, v)
	return u
}

// UpdateProbeHost sets the "ProbeHost" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateProbeHost() *IncidentUpsert {
	u.SetExcluded(incident.FieldProbeHost)
	return u
}

// SetError sets the "Error" field.
func (u *IncidentUpsert) SetError(v string) *IncidentUpsert {
	u.Set(incident.FieldError, v)
	return u
}

// UpdateError sets the "Error" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateError() *IncidentUpsert {
	u.SetExcluded(incident.FieldError)
	return u
}

// ClearError clears the value of the "Error" field.
func (u *IncidentUpsert) ClearError() *IncidentUpsert {
	u.SetNull(incident.FieldError)
	return u
}

// SetStart sets the "Start" field.
func (u *IncidentUpsert) SetStart(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldStart, v)
	return u
}

// UpdateStart sets the "Start" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateStart() *IncidentUpsert {
	u.SetExcluded(incident.FieldStart)
	return u
}

// SetEnd sets the "End" field.
func (u *IncidentUpsert) SetEnd(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldEnd, v)
	return u
}

// UpdateEnd sets the "End" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateEnd() *IncidentUpsert {
	u.SetExcluded(incident.FieldEnd)
	return u
}

// ClearEnd clears the value of the "End" field.
func (u *IncidentUpsert) ClearEnd() *IncidentUpsert {
	u.SetNull(incident.FieldEnd)
	return u
}

// SetState sets the "State" field.
func (u *IncidentUpsert) SetState(v []byte) *IncidentUpsert {
	u.Set(incident.FieldState, v)
	return u
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateState() *IncidentUpsert {
	u.SetExcluded(incident.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentUpsertOne) UpdateNewValues() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentUpsertOne) Ignore() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentUpsertOne) DoNothing() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentCreate.OnConflict
// documentation for more info.
func (u *IncidentUpsertOne) Update(set func(*IncidentUpsert)) *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "UUID" field.
func (u *IncidentUpsertOne) SetUUID(v uuid.UUID) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "UUID" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateUUID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateUUID()
	})
}

// SetIncidentID sets the "IncidentID" field.
func (u *IncidentUpsertOne) SetIncidentID(v uuid.UUID) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "IncidentID" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateIncidentID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateIncidentID()
	})
}

// ClearIncidentID clears the value of the "IncidentID" field.
func (u *IncidentUpsertOne) ClearIncidentID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearIncidentID()
	})
}

// SetName sets the "Name" field.
func (u *IncidentUpsertOne) SetName(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateName() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateName()
	})
}

// SetTime sets the "Time" field.
func (u *IncidentUpsertOne) SetTime(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "Time" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateTime() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTime()
	})
}

// SetIntLevel sets the "IntLevel" field.
func (u *IncidentUpsertOne) SetIntLevel(v int) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetIntLevel(v)
	})
}

// AddIntLevel adds v to the "IntLevel" field.
func (u *IncidentUpsertOne) AddIntLevel(v int) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.AddIntLevel(v)
	})
}

// UpdateIntLevel sets the "IntLevel" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateIntLevel() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateIntLevel()
	})
}

// SetUsername sets the "Username" field.
func (u *IncidentUpsertOne) SetUsername(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "Username" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateUsername() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateUsername()
	})
}

// SetRegion sets the "Region" field.
func (u *IncidentUpsertOne) SetRegion(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "Region" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateRegion() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateRegion()
	})
}

// SetProbeOS sets the "ProbeOS" field.
func (u *IncidentUpsertOne) SetProbeOS(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProbeOS(v)
	})
}

// UpdateProbeOS sets the "ProbeOS" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateProbeOS() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProbeOS()
	})
}

// SetProbeHost sets the "ProbeHost" field.
func (u *IncidentUpsertOne) SetProbeHost(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProbeHost(v)
	})
}

// UpdateProbeHost sets the "ProbeHost" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateProbeHost() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProbeHost()
	})
}

// SetError sets the "Error" field.
func (u *IncidentUpsertOne) SetError(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "Error" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateError() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "Error" field.
func (u *IncidentUpsertOne) ClearError() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearError()
	})
}

// SetStart sets the "Start" field.
func (u *IncidentUpsertOne) SetStart(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "Start" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateStart() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "End" field.
func (u *IncidentUpsertOne) SetEnd(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "End" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateEnd() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "End" field.
func (u *IncidentUpsertOne) ClearEnd() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearEnd()
	})
}

// SetState sets the "State" field.
func (u *IncidentUpsertOne) SetState(v []byte) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateState() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *IncidentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentCreateBulk is the builder for creating many Incident entities in bulk.
type IncidentCreateBulk struct {
	config
	builders []*IncidentCreate
	conflict []sql.ConflictOption
}

// Save creates the Incident entities in the database.
func (icb *IncidentCreateBulk) Save(ctx context.Context) ([]*Incident, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Incident, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IncidentCreateBulk) SaveX(ctx context.Context) []*Incident {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IncidentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IncidentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Incident.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (icb *IncidentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentUpsertBulk {
	icb.conflict = opts
	return &IncidentUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IncidentCreateBulk) OnConflictColumns(columns ...string) *IncidentUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IncidentUpsertBulk{
		create: icb,
	}
}

// IncidentUpsertBulk is the builder for "upsert"-ing
// a bulk of Incident nodes.
type IncidentUpsertBulk struct {
	create *IncidentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentUpsertBulk) UpdateNewValues() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentUpsertBulk) Ignore() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentUpsertBulk) DoNothing() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentUpsertBulk) Update(set func(*IncidentUpsert)) *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "UUID" field.
func (u *IncidentUpsertBulk) SetUUID(v uuid.UUID) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "UUID" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateUUID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateUUID()
	})
}

// SetIncidentID sets the "IncidentID" field.
func (u *IncidentUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "IncidentID" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateIncidentID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateIncidentID()
	})
}

// ClearIncidentID clears the value of the "IncidentID" field.
func (u *IncidentUpsertBulk) ClearIncidentID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearIncidentID()
	})
}

// SetName sets the "Name" field.
func (u *IncidentUpsertBulk) SetName(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateName() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateName()
	})
}

// SetTime sets the "Time" field.
func (u *IncidentUpsertBulk) SetTime(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "Time" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateTime() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTime()
	})
}

// SetIntLevel sets the "IntLevel" field.
func (u *IncidentUpsertBulk) SetIntLevel(v int) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetIntLevel(v)
	})
}

// AddIntLevel adds v to the "IntLevel" field.
func (u *IncidentUpsertBulk) AddIntLevel(v int) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.AddIntLevel(v)
	})
}

// UpdateIntLevel sets the "IntLevel" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateIntLevel() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateIntLevel()
	})
}

// SetUsername sets the "Username" field.
func (u *IncidentUpsertBulk) SetUsername(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "Username" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateUsername() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateUsername()
	})
}

// SetRegion sets the "Region" field.
func (u *IncidentUpsertBulk) SetRegion(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "Region" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateRegion() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateRegion()
	})
}

// SetProbeOS sets the "ProbeOS" field.
func (u *IncidentUpsertBulk) SetProbeOS(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProbeOS(v)
	})
}

// UpdateProbeOS sets the "ProbeOS" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateProbeOS() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProbeOS()
	})
}

// SetProbeHost sets the "ProbeHost" field.
func (u *IncidentUpsertBulk) SetProbeHost(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProbeHost(v)
	})
}

// UpdateProbeHost sets the "ProbeHost" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateProbeHost() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProbeHost()
	})
}

// SetError sets the "Error" field.
func (u *IncidentUpsertBulk) SetError(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "Error" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateError() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "Error" field.
func (u *IncidentUpsertBulk) ClearError() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearError()
	})
}

// SetStart sets the "Start" field.
func (u *IncidentUpsertBulk) SetStart(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "Start" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateStart() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "End" field.
func (u *IncidentUpsertBulk) SetEnd(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "End" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateEnd() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "End" field.
func (u *IncidentUpsertBulk) ClearEnd() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearEnd()
	})
}

// SetState sets the "State" field.
func (u *IncidentUpsertBulk) SetState(v []byte) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "State" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateState() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *IncidentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
