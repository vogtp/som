// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/counter"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/failure"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/file"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/incident"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/predicate"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/status"
)

// IncidentUpdate is the builder for updating Incident entities.
type IncidentUpdate struct {
	config
	hooks    []Hook
	mutation *IncidentMutation
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iu *IncidentUpdate) Where(ps ...predicate.Incident) *IncidentUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUUID sets the "UUID" field.
func (iu *IncidentUpdate) SetUUID(u uuid.UUID) *IncidentUpdate {
	iu.mutation.SetUUID(u)
	return iu
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableUUID(u *uuid.UUID) *IncidentUpdate {
	if u != nil {
		iu.SetUUID(*u)
	}
	return iu
}

// SetIncidentID sets the "IncidentID" field.
func (iu *IncidentUpdate) SetIncidentID(u uuid.UUID) *IncidentUpdate {
	iu.mutation.SetIncidentID(u)
	return iu
}

// SetNillableIncidentID sets the "IncidentID" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableIncidentID(u *uuid.UUID) *IncidentUpdate {
	if u != nil {
		iu.SetIncidentID(*u)
	}
	return iu
}

// ClearIncidentID clears the value of the "IncidentID" field.
func (iu *IncidentUpdate) ClearIncidentID() *IncidentUpdate {
	iu.mutation.ClearIncidentID()
	return iu
}

// SetName sets the "Name" field.
func (iu *IncidentUpdate) SetName(s string) *IncidentUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableName(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetTime sets the "Time" field.
func (iu *IncidentUpdate) SetTime(t time.Time) *IncidentUpdate {
	iu.mutation.SetTime(t)
	return iu
}

// SetNillableTime sets the "Time" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableTime(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetTime(*t)
	}
	return iu
}

// SetIntLevel sets the "IntLevel" field.
func (iu *IncidentUpdate) SetIntLevel(i int) *IncidentUpdate {
	iu.mutation.ResetIntLevel()
	iu.mutation.SetIntLevel(i)
	return iu
}

// SetNillableIntLevel sets the "IntLevel" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableIntLevel(i *int) *IncidentUpdate {
	if i != nil {
		iu.SetIntLevel(*i)
	}
	return iu
}

// AddIntLevel adds i to the "IntLevel" field.
func (iu *IncidentUpdate) AddIntLevel(i int) *IncidentUpdate {
	iu.mutation.AddIntLevel(i)
	return iu
}

// SetUsername sets the "Username" field.
func (iu *IncidentUpdate) SetUsername(s string) *IncidentUpdate {
	iu.mutation.SetUsername(s)
	return iu
}

// SetNillableUsername sets the "Username" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableUsername(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetUsername(*s)
	}
	return iu
}

// SetRegion sets the "Region" field.
func (iu *IncidentUpdate) SetRegion(s string) *IncidentUpdate {
	iu.mutation.SetRegion(s)
	return iu
}

// SetNillableRegion sets the "Region" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableRegion(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetRegion(*s)
	}
	return iu
}

// SetProbeOS sets the "ProbeOS" field.
func (iu *IncidentUpdate) SetProbeOS(s string) *IncidentUpdate {
	iu.mutation.SetProbeOS(s)
	return iu
}

// SetNillableProbeOS sets the "ProbeOS" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableProbeOS(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetProbeOS(*s)
	}
	return iu
}

// SetProbeHost sets the "ProbeHost" field.
func (iu *IncidentUpdate) SetProbeHost(s string) *IncidentUpdate {
	iu.mutation.SetProbeHost(s)
	return iu
}

// SetNillableProbeHost sets the "ProbeHost" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableProbeHost(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetProbeHost(*s)
	}
	return iu
}

// SetError sets the "Error" field.
func (iu *IncidentUpdate) SetError(s string) *IncidentUpdate {
	iu.mutation.SetError(s)
	return iu
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableError(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetError(*s)
	}
	return iu
}

// ClearError clears the value of the "Error" field.
func (iu *IncidentUpdate) ClearError() *IncidentUpdate {
	iu.mutation.ClearError()
	return iu
}

// SetStart sets the "Start" field.
func (iu *IncidentUpdate) SetStart(t time.Time) *IncidentUpdate {
	iu.mutation.SetStart(t)
	return iu
}

// SetNillableStart sets the "Start" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableStart(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetStart(*t)
	}
	return iu
}

// SetEnd sets the "End" field.
func (iu *IncidentUpdate) SetEnd(t time.Time) *IncidentUpdate {
	iu.mutation.SetEnd(t)
	return iu
}

// SetNillableEnd sets the "End" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableEnd(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetEnd(*t)
	}
	return iu
}

// ClearEnd clears the value of the "End" field.
func (iu *IncidentUpdate) ClearEnd() *IncidentUpdate {
	iu.mutation.ClearEnd()
	return iu
}

// SetState sets the "State" field.
func (iu *IncidentUpdate) SetState(b []byte) *IncidentUpdate {
	iu.mutation.SetState(b)
	return iu
}

// AddCounterIDs adds the "Counters" edge to the Counter entity by IDs.
func (iu *IncidentUpdate) AddCounterIDs(ids ...int) *IncidentUpdate {
	iu.mutation.AddCounterIDs(ids...)
	return iu
}

// AddCounters adds the "Counters" edges to the Counter entity.
func (iu *IncidentUpdate) AddCounters(c ...*Counter) *IncidentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCounterIDs(ids...)
}

// AddStatiIDs adds the "Stati" edge to the Status entity by IDs.
func (iu *IncidentUpdate) AddStatiIDs(ids ...int) *IncidentUpdate {
	iu.mutation.AddStatiIDs(ids...)
	return iu
}

// AddStati adds the "Stati" edges to the Status entity.
func (iu *IncidentUpdate) AddStati(s ...*Status) *IncidentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.AddStatiIDs(ids...)
}

// AddFailureIDs adds the "Failures" edge to the Failure entity by IDs.
func (iu *IncidentUpdate) AddFailureIDs(ids ...int) *IncidentUpdate {
	iu.mutation.AddFailureIDs(ids...)
	return iu
}

// AddFailures adds the "Failures" edges to the Failure entity.
func (iu *IncidentUpdate) AddFailures(f ...*Failure) *IncidentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.AddFailureIDs(ids...)
}

// AddFileIDs adds the "Files" edge to the File entity by IDs.
func (iu *IncidentUpdate) AddFileIDs(ids ...int) *IncidentUpdate {
	iu.mutation.AddFileIDs(ids...)
	return iu
}

// AddFiles adds the "Files" edges to the File entity.
func (iu *IncidentUpdate) AddFiles(f ...*File) *IncidentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.AddFileIDs(ids...)
}

// Mutation returns the IncidentMutation object of the builder.
func (iu *IncidentUpdate) Mutation() *IncidentMutation {
	return iu.mutation
}

// ClearCounters clears all "Counters" edges to the Counter entity.
func (iu *IncidentUpdate) ClearCounters() *IncidentUpdate {
	iu.mutation.ClearCounters()
	return iu
}

// RemoveCounterIDs removes the "Counters" edge to Counter entities by IDs.
func (iu *IncidentUpdate) RemoveCounterIDs(ids ...int) *IncidentUpdate {
	iu.mutation.RemoveCounterIDs(ids...)
	return iu
}

// RemoveCounters removes "Counters" edges to Counter entities.
func (iu *IncidentUpdate) RemoveCounters(c ...*Counter) *IncidentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCounterIDs(ids...)
}

// ClearStati clears all "Stati" edges to the Status entity.
func (iu *IncidentUpdate) ClearStati() *IncidentUpdate {
	iu.mutation.ClearStati()
	return iu
}

// RemoveStatiIDs removes the "Stati" edge to Status entities by IDs.
func (iu *IncidentUpdate) RemoveStatiIDs(ids ...int) *IncidentUpdate {
	iu.mutation.RemoveStatiIDs(ids...)
	return iu
}

// RemoveStati removes "Stati" edges to Status entities.
func (iu *IncidentUpdate) RemoveStati(s ...*Status) *IncidentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.RemoveStatiIDs(ids...)
}

// ClearFailures clears all "Failures" edges to the Failure entity.
func (iu *IncidentUpdate) ClearFailures() *IncidentUpdate {
	iu.mutation.ClearFailures()
	return iu
}

// RemoveFailureIDs removes the "Failures" edge to Failure entities by IDs.
func (iu *IncidentUpdate) RemoveFailureIDs(ids ...int) *IncidentUpdate {
	iu.mutation.RemoveFailureIDs(ids...)
	return iu
}

// RemoveFailures removes "Failures" edges to Failure entities.
func (iu *IncidentUpdate) RemoveFailures(f ...*Failure) *IncidentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.RemoveFailureIDs(ids...)
}

// ClearFiles clears all "Files" edges to the File entity.
func (iu *IncidentUpdate) ClearFiles() *IncidentUpdate {
	iu.mutation.ClearFiles()
	return iu
}

// RemoveFileIDs removes the "Files" edge to File entities by IDs.
func (iu *IncidentUpdate) RemoveFileIDs(ids ...int) *IncidentUpdate {
	iu.mutation.RemoveFileIDs(ids...)
	return iu
}

// RemoveFiles removes "Files" edges to File entities.
func (iu *IncidentUpdate) RemoveFiles(f ...*File) *IncidentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IncidentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IncidentUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IncidentUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IncidentUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IncidentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UUID(); ok {
		_spec.SetField(incident.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := iu.mutation.IncidentID(); ok {
		_spec.SetField(incident.FieldIncidentID, field.TypeUUID, value)
	}
	if iu.mutation.IncidentIDCleared() {
		_spec.ClearField(incident.FieldIncidentID, field.TypeUUID)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(incident.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
	}
	if value, ok := iu.mutation.IntLevel(); ok {
		_spec.SetField(incident.FieldIntLevel, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedIntLevel(); ok {
		_spec.AddField(incident.FieldIntLevel, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Username(); ok {
		_spec.SetField(incident.FieldUsername, field.TypeString, value)
	}
	if value, ok := iu.mutation.Region(); ok {
		_spec.SetField(incident.FieldRegion, field.TypeString, value)
	}
	if value, ok := iu.mutation.ProbeOS(); ok {
		_spec.SetField(incident.FieldProbeOS, field.TypeString, value)
	}
	if value, ok := iu.mutation.ProbeHost(); ok {
		_spec.SetField(incident.FieldProbeHost, field.TypeString, value)
	}
	if value, ok := iu.mutation.Error(); ok {
		_spec.SetField(incident.FieldError, field.TypeString, value)
	}
	if iu.mutation.ErrorCleared() {
		_spec.ClearField(incident.FieldError, field.TypeString)
	}
	if value, ok := iu.mutation.Start(); ok {
		_spec.SetField(incident.FieldStart, field.TypeTime, value)
	}
	if value, ok := iu.mutation.End(); ok {
		_spec.SetField(incident.FieldEnd, field.TypeTime, value)
	}
	if iu.mutation.EndCleared() {
		_spec.ClearField(incident.FieldEnd, field.TypeTime)
	}
	if value, ok := iu.mutation.State(); ok {
		_spec.SetField(incident.FieldState, field.TypeBytes, value)
	}
	if iu.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCountersIDs(); len(nodes) > 0 && !iu.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.StatiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedStatiIDs(); len(nodes) > 0 && !iu.mutation.StatiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.StatiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedFailuresIDs(); len(nodes) > 0 && !iu.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.FailuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !iu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IncidentUpdateOne is the builder for updating a single Incident entity.
type IncidentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncidentMutation
}

// SetUUID sets the "UUID" field.
func (iuo *IncidentUpdateOne) SetUUID(u uuid.UUID) *IncidentUpdateOne {
	iuo.mutation.SetUUID(u)
	return iuo
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableUUID(u *uuid.UUID) *IncidentUpdateOne {
	if u != nil {
		iuo.SetUUID(*u)
	}
	return iuo
}

// SetIncidentID sets the "IncidentID" field.
func (iuo *IncidentUpdateOne) SetIncidentID(u uuid.UUID) *IncidentUpdateOne {
	iuo.mutation.SetIncidentID(u)
	return iuo
}

// SetNillableIncidentID sets the "IncidentID" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableIncidentID(u *uuid.UUID) *IncidentUpdateOne {
	if u != nil {
		iuo.SetIncidentID(*u)
	}
	return iuo
}

// ClearIncidentID clears the value of the "IncidentID" field.
func (iuo *IncidentUpdateOne) ClearIncidentID() *IncidentUpdateOne {
	iuo.mutation.ClearIncidentID()
	return iuo
}

// SetName sets the "Name" field.
func (iuo *IncidentUpdateOne) SetName(s string) *IncidentUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableName(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetTime sets the "Time" field.
func (iuo *IncidentUpdateOne) SetTime(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetTime(t)
	return iuo
}

// SetNillableTime sets the "Time" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableTime(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetTime(*t)
	}
	return iuo
}

// SetIntLevel sets the "IntLevel" field.
func (iuo *IncidentUpdateOne) SetIntLevel(i int) *IncidentUpdateOne {
	iuo.mutation.ResetIntLevel()
	iuo.mutation.SetIntLevel(i)
	return iuo
}

// SetNillableIntLevel sets the "IntLevel" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableIntLevel(i *int) *IncidentUpdateOne {
	if i != nil {
		iuo.SetIntLevel(*i)
	}
	return iuo
}

// AddIntLevel adds i to the "IntLevel" field.
func (iuo *IncidentUpdateOne) AddIntLevel(i int) *IncidentUpdateOne {
	iuo.mutation.AddIntLevel(i)
	return iuo
}

// SetUsername sets the "Username" field.
func (iuo *IncidentUpdateOne) SetUsername(s string) *IncidentUpdateOne {
	iuo.mutation.SetUsername(s)
	return iuo
}

// SetNillableUsername sets the "Username" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableUsername(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetUsername(*s)
	}
	return iuo
}

// SetRegion sets the "Region" field.
func (iuo *IncidentUpdateOne) SetRegion(s string) *IncidentUpdateOne {
	iuo.mutation.SetRegion(s)
	return iuo
}

// SetNillableRegion sets the "Region" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableRegion(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetRegion(*s)
	}
	return iuo
}

// SetProbeOS sets the "ProbeOS" field.
func (iuo *IncidentUpdateOne) SetProbeOS(s string) *IncidentUpdateOne {
	iuo.mutation.SetProbeOS(s)
	return iuo
}

// SetNillableProbeOS sets the "ProbeOS" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableProbeOS(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetProbeOS(*s)
	}
	return iuo
}

// SetProbeHost sets the "ProbeHost" field.
func (iuo *IncidentUpdateOne) SetProbeHost(s string) *IncidentUpdateOne {
	iuo.mutation.SetProbeHost(s)
	return iuo
}

// SetNillableProbeHost sets the "ProbeHost" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableProbeHost(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetProbeHost(*s)
	}
	return iuo
}

// SetError sets the "Error" field.
func (iuo *IncidentUpdateOne) SetError(s string) *IncidentUpdateOne {
	iuo.mutation.SetError(s)
	return iuo
}

// SetNillableError sets the "Error" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableError(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetError(*s)
	}
	return iuo
}

// ClearError clears the value of the "Error" field.
func (iuo *IncidentUpdateOne) ClearError() *IncidentUpdateOne {
	iuo.mutation.ClearError()
	return iuo
}

// SetStart sets the "Start" field.
func (iuo *IncidentUpdateOne) SetStart(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetStart(t)
	return iuo
}

// SetNillableStart sets the "Start" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableStart(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetStart(*t)
	}
	return iuo
}

// SetEnd sets the "End" field.
func (iuo *IncidentUpdateOne) SetEnd(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetEnd(t)
	return iuo
}

// SetNillableEnd sets the "End" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableEnd(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetEnd(*t)
	}
	return iuo
}

// ClearEnd clears the value of the "End" field.
func (iuo *IncidentUpdateOne) ClearEnd() *IncidentUpdateOne {
	iuo.mutation.ClearEnd()
	return iuo
}

// SetState sets the "State" field.
func (iuo *IncidentUpdateOne) SetState(b []byte) *IncidentUpdateOne {
	iuo.mutation.SetState(b)
	return iuo
}

// AddCounterIDs adds the "Counters" edge to the Counter entity by IDs.
func (iuo *IncidentUpdateOne) AddCounterIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.AddCounterIDs(ids...)
	return iuo
}

// AddCounters adds the "Counters" edges to the Counter entity.
func (iuo *IncidentUpdateOne) AddCounters(c ...*Counter) *IncidentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCounterIDs(ids...)
}

// AddStatiIDs adds the "Stati" edge to the Status entity by IDs.
func (iuo *IncidentUpdateOne) AddStatiIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.AddStatiIDs(ids...)
	return iuo
}

// AddStati adds the "Stati" edges to the Status entity.
func (iuo *IncidentUpdateOne) AddStati(s ...*Status) *IncidentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.AddStatiIDs(ids...)
}

// AddFailureIDs adds the "Failures" edge to the Failure entity by IDs.
func (iuo *IncidentUpdateOne) AddFailureIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.AddFailureIDs(ids...)
	return iuo
}

// AddFailures adds the "Failures" edges to the Failure entity.
func (iuo *IncidentUpdateOne) AddFailures(f ...*Failure) *IncidentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.AddFailureIDs(ids...)
}

// AddFileIDs adds the "Files" edge to the File entity by IDs.
func (iuo *IncidentUpdateOne) AddFileIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.AddFileIDs(ids...)
	return iuo
}

// AddFiles adds the "Files" edges to the File entity.
func (iuo *IncidentUpdateOne) AddFiles(f ...*File) *IncidentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.AddFileIDs(ids...)
}

// Mutation returns the IncidentMutation object of the builder.
func (iuo *IncidentUpdateOne) Mutation() *IncidentMutation {
	return iuo.mutation
}

// ClearCounters clears all "Counters" edges to the Counter entity.
func (iuo *IncidentUpdateOne) ClearCounters() *IncidentUpdateOne {
	iuo.mutation.ClearCounters()
	return iuo
}

// RemoveCounterIDs removes the "Counters" edge to Counter entities by IDs.
func (iuo *IncidentUpdateOne) RemoveCounterIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.RemoveCounterIDs(ids...)
	return iuo
}

// RemoveCounters removes "Counters" edges to Counter entities.
func (iuo *IncidentUpdateOne) RemoveCounters(c ...*Counter) *IncidentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCounterIDs(ids...)
}

// ClearStati clears all "Stati" edges to the Status entity.
func (iuo *IncidentUpdateOne) ClearStati() *IncidentUpdateOne {
	iuo.mutation.ClearStati()
	return iuo
}

// RemoveStatiIDs removes the "Stati" edge to Status entities by IDs.
func (iuo *IncidentUpdateOne) RemoveStatiIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.RemoveStatiIDs(ids...)
	return iuo
}

// RemoveStati removes "Stati" edges to Status entities.
func (iuo *IncidentUpdateOne) RemoveStati(s ...*Status) *IncidentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.RemoveStatiIDs(ids...)
}

// ClearFailures clears all "Failures" edges to the Failure entity.
func (iuo *IncidentUpdateOne) ClearFailures() *IncidentUpdateOne {
	iuo.mutation.ClearFailures()
	return iuo
}

// RemoveFailureIDs removes the "Failures" edge to Failure entities by IDs.
func (iuo *IncidentUpdateOne) RemoveFailureIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.RemoveFailureIDs(ids...)
	return iuo
}

// RemoveFailures removes "Failures" edges to Failure entities.
func (iuo *IncidentUpdateOne) RemoveFailures(f ...*Failure) *IncidentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.RemoveFailureIDs(ids...)
}

// ClearFiles clears all "Files" edges to the File entity.
func (iuo *IncidentUpdateOne) ClearFiles() *IncidentUpdateOne {
	iuo.mutation.ClearFiles()
	return iuo
}

// RemoveFileIDs removes the "Files" edge to File entities by IDs.
func (iuo *IncidentUpdateOne) RemoveFileIDs(ids ...int) *IncidentUpdateOne {
	iuo.mutation.RemoveFileIDs(ids...)
	return iuo
}

// RemoveFiles removes "Files" edges to File entities.
func (iuo *IncidentUpdateOne) RemoveFiles(f ...*File) *IncidentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return iuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iuo *IncidentUpdateOne) Where(ps ...predicate.Incident) *IncidentUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IncidentUpdateOne) Select(field string, fields ...string) *IncidentUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Incident entity.
func (iuo *IncidentUpdateOne) Save(ctx context.Context) (*Incident, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IncidentUpdateOne) SaveX(ctx context.Context) *Incident {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IncidentUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IncidentUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IncidentUpdateOne) sqlSave(ctx context.Context) (_node *Incident, err error) {
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Incident.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incident.FieldID)
		for _, f := range fields {
			if !incident.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incident.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UUID(); ok {
		_spec.SetField(incident.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := iuo.mutation.IncidentID(); ok {
		_spec.SetField(incident.FieldIncidentID, field.TypeUUID, value)
	}
	if iuo.mutation.IncidentIDCleared() {
		_spec.ClearField(incident.FieldIncidentID, field.TypeUUID)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(incident.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Time(); ok {
		_spec.SetField(incident.FieldTime, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.IntLevel(); ok {
		_spec.SetField(incident.FieldIntLevel, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedIntLevel(); ok {
		_spec.AddField(incident.FieldIntLevel, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Username(); ok {
		_spec.SetField(incident.FieldUsername, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Region(); ok {
		_spec.SetField(incident.FieldRegion, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ProbeOS(); ok {
		_spec.SetField(incident.FieldProbeOS, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ProbeHost(); ok {
		_spec.SetField(incident.FieldProbeHost, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Error(); ok {
		_spec.SetField(incident.FieldError, field.TypeString, value)
	}
	if iuo.mutation.ErrorCleared() {
		_spec.ClearField(incident.FieldError, field.TypeString)
	}
	if value, ok := iuo.mutation.Start(); ok {
		_spec.SetField(incident.FieldStart, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.End(); ok {
		_spec.SetField(incident.FieldEnd, field.TypeTime, value)
	}
	if iuo.mutation.EndCleared() {
		_spec.ClearField(incident.FieldEnd, field.TypeTime)
	}
	if value, ok := iuo.mutation.State(); ok {
		_spec.SetField(incident.FieldState, field.TypeBytes, value)
	}
	if iuo.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCountersIDs(); len(nodes) > 0 && !iuo.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CountersTable,
			Columns: []string{incident.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.StatiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedStatiIDs(); len(nodes) > 0 && !iuo.mutation.StatiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.StatiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatiTable,
			Columns: []string{incident.StatiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedFailuresIDs(); len(nodes) > 0 && !iuo.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.FailuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FailuresTable,
			Columns: []string{incident.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(failure.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !iuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.FilesTable,
			Columns: []string{incident.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Incident{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
