// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/failure"
)

// Failure is the model entity for the Failure schema.
type Failure struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Error holds the value of the "Error" field.
	Error string `json:"Error,omitempty"`
	// Idx holds the value of the "Idx" field.
	Idx               int `json:"Idx,omitempty"`
	alert_failures    *int
	incident_failures *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Failure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case failure.FieldID, failure.FieldIdx:
			values[i] = new(sql.NullInt64)
		case failure.FieldError:
			values[i] = new(sql.NullString)
		case failure.ForeignKeys[0]: // alert_failures
			values[i] = new(sql.NullInt64)
		case failure.ForeignKeys[1]: // incident_failures
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Failure", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Failure fields.
func (f *Failure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case failure.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case failure.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Error", values[i])
			} else if value.Valid {
				f.Error = value.String
			}
		case failure.FieldIdx:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Idx", values[i])
			} else if value.Valid {
				f.Idx = int(value.Int64)
			}
		case failure.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field alert_failures", value)
			} else if value.Valid {
				f.alert_failures = new(int)
				*f.alert_failures = int(value.Int64)
			}
		case failure.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field incident_failures", value)
			} else if value.Valid {
				f.incident_failures = new(int)
				*f.incident_failures = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Failure.
// Note that you need to call Failure.Unwrap() before calling this method if this Failure
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Failure) Update() *FailureUpdateOne {
	return (&FailureClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Failure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Failure) Unwrap() *Failure {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Failure is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Failure) String() string {
	var builder strings.Builder
	builder.WriteString("Failure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("Error=")
	builder.WriteString(f.Error)
	builder.WriteString(", ")
	builder.WriteString("Idx=")
	builder.WriteString(fmt.Sprintf("%v", f.Idx))
	builder.WriteByte(')')
	return builder.String()
}

// Failures is a parsable slice of Failure.
type Failures []*Failure

func (f Failures) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
