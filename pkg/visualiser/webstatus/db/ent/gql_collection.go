// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/alert"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/counter"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/failure"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/file"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/incident"
	"github.com/vogtp/som/pkg/visualiser/webstatus/db/ent/status"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AlertQuery) CollectFields(ctx context.Context, satisfies ...string) (*AlertQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AlertQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(alert.Columns))
		selectedFields = []string{alert.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "counters":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CounterClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedCounters(alias, func(wq *CounterQuery) {
				*wq = *query
			})
		case "stati":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatusClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedStati(alias, func(wq *StatusQuery) {
				*wq = *query
			})
		case "failures":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FailureClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedFailures(alias, func(wq *FailureQuery) {
				*wq = *query
			})
		case "files":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FileClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedFiles(alias, func(wq *FileQuery) {
				*wq = *query
			})
		case "uuid":
			if _, ok := fieldSeen[alert.FieldUUID]; !ok {
				selectedFields = append(selectedFields, alert.FieldUUID)
				fieldSeen[alert.FieldUUID] = struct{}{}
			}
		case "incidentid":
			if _, ok := fieldSeen[alert.FieldIncidentID]; !ok {
				selectedFields = append(selectedFields, alert.FieldIncidentID)
				fieldSeen[alert.FieldIncidentID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[alert.FieldName]; !ok {
				selectedFields = append(selectedFields, alert.FieldName)
				fieldSeen[alert.FieldName] = struct{}{}
			}
		case "time":
			if _, ok := fieldSeen[alert.FieldTime]; !ok {
				selectedFields = append(selectedFields, alert.FieldTime)
				fieldSeen[alert.FieldTime] = struct{}{}
			}
		case "intlevel":
			if _, ok := fieldSeen[alert.FieldIntLevel]; !ok {
				selectedFields = append(selectedFields, alert.FieldIntLevel)
				fieldSeen[alert.FieldIntLevel] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[alert.FieldUsername]; !ok {
				selectedFields = append(selectedFields, alert.FieldUsername)
				fieldSeen[alert.FieldUsername] = struct{}{}
			}
		case "region":
			if _, ok := fieldSeen[alert.FieldRegion]; !ok {
				selectedFields = append(selectedFields, alert.FieldRegion)
				fieldSeen[alert.FieldRegion] = struct{}{}
			}
		case "probeos":
			if _, ok := fieldSeen[alert.FieldProbeOS]; !ok {
				selectedFields = append(selectedFields, alert.FieldProbeOS)
				fieldSeen[alert.FieldProbeOS] = struct{}{}
			}
		case "probehost":
			if _, ok := fieldSeen[alert.FieldProbeHost]; !ok {
				selectedFields = append(selectedFields, alert.FieldProbeHost)
				fieldSeen[alert.FieldProbeHost] = struct{}{}
			}
		case "error":
			if _, ok := fieldSeen[alert.FieldError]; !ok {
				selectedFields = append(selectedFields, alert.FieldError)
				fieldSeen[alert.FieldError] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type alertPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AlertPaginateOption
}

func newAlertPaginateArgs(rv map[string]any) *alertPaginateArgs {
	args := &alertPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CounterQuery) CollectFields(ctx context.Context, satisfies ...string) (*CounterQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CounterQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(counter.Columns))
		selectedFields = []string{counter.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[counter.FieldName]; !ok {
				selectedFields = append(selectedFields, counter.FieldName)
				fieldSeen[counter.FieldName] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[counter.FieldValue]; !ok {
				selectedFields = append(selectedFields, counter.FieldValue)
				fieldSeen[counter.FieldValue] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type counterPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CounterPaginateOption
}

func newCounterPaginateArgs(rv map[string]any) *counterPaginateArgs {
	args := &counterPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FailureQuery) CollectFields(ctx context.Context, satisfies ...string) (*FailureQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FailureQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(failure.Columns))
		selectedFields = []string{failure.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "error":
			if _, ok := fieldSeen[failure.FieldError]; !ok {
				selectedFields = append(selectedFields, failure.FieldError)
				fieldSeen[failure.FieldError] = struct{}{}
			}
		case "idx":
			if _, ok := fieldSeen[failure.FieldIdx]; !ok {
				selectedFields = append(selectedFields, failure.FieldIdx)
				fieldSeen[failure.FieldIdx] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type failurePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FailurePaginateOption
}

func newFailurePaginateArgs(rv map[string]any) *failurePaginateArgs {
	args := &failurePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FileQuery) CollectFields(ctx context.Context, satisfies ...string) (*FileQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FileQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(file.Columns))
		selectedFields = []string{file.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "uuid":
			if _, ok := fieldSeen[file.FieldUUID]; !ok {
				selectedFields = append(selectedFields, file.FieldUUID)
				fieldSeen[file.FieldUUID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[file.FieldName]; !ok {
				selectedFields = append(selectedFields, file.FieldName)
				fieldSeen[file.FieldName] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[file.FieldType]; !ok {
				selectedFields = append(selectedFields, file.FieldType)
				fieldSeen[file.FieldType] = struct{}{}
			}
		case "ext":
			if _, ok := fieldSeen[file.FieldExt]; !ok {
				selectedFields = append(selectedFields, file.FieldExt)
				fieldSeen[file.FieldExt] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[file.FieldSize]; !ok {
				selectedFields = append(selectedFields, file.FieldSize)
				fieldSeen[file.FieldSize] = struct{}{}
			}
		case "payload":
			if _, ok := fieldSeen[file.FieldPayload]; !ok {
				selectedFields = append(selectedFields, file.FieldPayload)
				fieldSeen[file.FieldPayload] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type filePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FilePaginateOption
}

func newFilePaginateArgs(rv map[string]any) *filePaginateArgs {
	args := &filePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IncidentQuery) CollectFields(ctx context.Context, satisfies ...string) (*IncidentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *IncidentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(incident.Columns))
		selectedFields = []string{incident.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "counters":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CounterClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedCounters(alias, func(wq *CounterQuery) {
				*wq = *query
			})
		case "stati":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatusClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedStati(alias, func(wq *StatusQuery) {
				*wq = *query
			})
		case "failures":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FailureClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedFailures(alias, func(wq *FailureQuery) {
				*wq = *query
			})
		case "files":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FileClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedFiles(alias, func(wq *FileQuery) {
				*wq = *query
			})
		case "uuid":
			if _, ok := fieldSeen[incident.FieldUUID]; !ok {
				selectedFields = append(selectedFields, incident.FieldUUID)
				fieldSeen[incident.FieldUUID] = struct{}{}
			}
		case "incidentid":
			if _, ok := fieldSeen[incident.FieldIncidentID]; !ok {
				selectedFields = append(selectedFields, incident.FieldIncidentID)
				fieldSeen[incident.FieldIncidentID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[incident.FieldName]; !ok {
				selectedFields = append(selectedFields, incident.FieldName)
				fieldSeen[incident.FieldName] = struct{}{}
			}
		case "time":
			if _, ok := fieldSeen[incident.FieldTime]; !ok {
				selectedFields = append(selectedFields, incident.FieldTime)
				fieldSeen[incident.FieldTime] = struct{}{}
			}
		case "intlevel":
			if _, ok := fieldSeen[incident.FieldIntLevel]; !ok {
				selectedFields = append(selectedFields, incident.FieldIntLevel)
				fieldSeen[incident.FieldIntLevel] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[incident.FieldUsername]; !ok {
				selectedFields = append(selectedFields, incident.FieldUsername)
				fieldSeen[incident.FieldUsername] = struct{}{}
			}
		case "region":
			if _, ok := fieldSeen[incident.FieldRegion]; !ok {
				selectedFields = append(selectedFields, incident.FieldRegion)
				fieldSeen[incident.FieldRegion] = struct{}{}
			}
		case "probeos":
			if _, ok := fieldSeen[incident.FieldProbeOS]; !ok {
				selectedFields = append(selectedFields, incident.FieldProbeOS)
				fieldSeen[incident.FieldProbeOS] = struct{}{}
			}
		case "probehost":
			if _, ok := fieldSeen[incident.FieldProbeHost]; !ok {
				selectedFields = append(selectedFields, incident.FieldProbeHost)
				fieldSeen[incident.FieldProbeHost] = struct{}{}
			}
		case "error":
			if _, ok := fieldSeen[incident.FieldError]; !ok {
				selectedFields = append(selectedFields, incident.FieldError)
				fieldSeen[incident.FieldError] = struct{}{}
			}
		case "start":
			if _, ok := fieldSeen[incident.FieldStart]; !ok {
				selectedFields = append(selectedFields, incident.FieldStart)
				fieldSeen[incident.FieldStart] = struct{}{}
			}
		case "end":
			if _, ok := fieldSeen[incident.FieldEnd]; !ok {
				selectedFields = append(selectedFields, incident.FieldEnd)
				fieldSeen[incident.FieldEnd] = struct{}{}
			}
		case "state":
			if _, ok := fieldSeen[incident.FieldState]; !ok {
				selectedFields = append(selectedFields, incident.FieldState)
				fieldSeen[incident.FieldState] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type incidentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []IncidentPaginateOption
}

func newIncidentPaginateArgs(rv map[string]any) *incidentPaginateArgs {
	args := &incidentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StatusQuery) CollectFields(ctx context.Context, satisfies ...string) (*StatusQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *StatusQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(status.Columns))
		selectedFields = []string{status.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[status.FieldName]; !ok {
				selectedFields = append(selectedFields, status.FieldName)
				fieldSeen[status.FieldName] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[status.FieldValue]; !ok {
				selectedFields = append(selectedFields, status.FieldValue)
				fieldSeen[status.FieldValue] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type statusPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StatusPaginateOption
}

func newStatusPaginateArgs(rv map[string]any) *statusPaginateArgs {
	args := &statusPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
