directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Alert implements Node {
  id: ID!
  uuid: UUID!
  incidentid: UUID!
  name: String!
  time: Time!
  intlevel: Int!
  username: String!
  region: String!
  probeos: String!
  probehost: String!
  error: String
  counters: [Counter!]
  stati: [Status!]
  failures: [Failure!]
  files: [File!]
}
type Counter implements Node {
  id: ID!
  name: String!
  value: String!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Failure implements Node {
  id: ID!
  error: String!
  idx: Int!
}
type File implements Node {
  id: ID!
  uuid: UUID!
  name: String!
  type: String!
  ext: String!
  size: Int!
  payload: []byte!
}
type Incident implements Node {
  id: ID!
  uuid: UUID!
  incidentid: UUID!
  name: String!
  time: Time!
  intlevel: Int!
  username: String!
  region: String!
  probeos: String!
  probehost: String!
  error: String
  start: Time!
  end: Time!
  state: []byte!
  counters: [Counter!]
  stati: [Status!]
  failures: [Failure!]
  files: [File!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/vogtp/som/pkg/visualiser/webstatus/db/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Status implements Node {
  id: ID!
  name: String!
  value: String!
}
